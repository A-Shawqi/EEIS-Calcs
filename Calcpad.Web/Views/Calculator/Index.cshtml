@model Calcpad.web.ViewModels.CalculateViewModel
@section meta{
    <meta name="description"
          content="Free online engineering calculator with real and complex numbers, units, functions, graphing and numerical methods">
    <meta name="keywords" content="online,engineering,programmable,calculator,operators,functions,graphing,units">
}
@section Styles{
    <environment include="Development">
        <link rel="stylesheet" href="~/css/Calcpad.css">
        <link rel="stylesheet" href="~/css/plot.css">
        <link rel="stylesheet" href="~/css/code.css">
    </environment>
    <environment exclude="Development">
        <link rel="stylesheet" href="~/css/Calcpad.min.css">
        <link rel="stylesheet" href="~/css/plot.min.css">
        <link rel="stylesheet" href="~/css/code.min.css">
    </environment>
}
@{
    string TypeName = Enum.GetName(typeof(CalculateViewModel.CalculatorMode), Model.Mode);
    ViewData["Title"] = TypeName + " Calculator";
    int w = Model.Mode == CalculateViewModel.CalculatorMode.Basic ? 6 : 9;
}
<form action="/" method="post">
    @Html.AntiForgeryToken()
</form>
<br />
<h1>Calculator: <small>@TypeName</small></h1>
<hr />
<div class="row">
    <div class="col-sm-@w" style="min-width: 27em;">
        <p class="p-1">
            @if (Model.Mode == CalculateViewModel.CalculatorMode.Basic)
            {
                <strong class="mr-3">Basic</strong>
                <a asp-route-id="2" class="mr-3">Scientific</a>
                <a asp-route-id="3">Graphical</a>
            }
            else if (Model.Mode == CalculateViewModel.CalculatorMode.Scientific)
            {
                <a asp-route-id="1" class="mr-3">Basic</a>
                <strong class="mr-3">Scientific</strong>
                <a asp-route-id="3">Graphical</a>
            }
            else
            {
                <a asp-route-id="1" class="mr-3">Basic</a>
                <a asp-route-id="2" class="mr-3">Scientific</a>
                <strong>Graphical</strong>
            }
        </p>
        <div class="frame">
            @if (Model.Mode != CalculateViewModel.CalculatorMode.Graphical)
            {
                <div class="equation rounded d-flex justify-content-center align-items-center">
                    <div asp-validation-summary="All" class="text-danger"></div>
                    <div class="Calcpad align-middle align-self-center" id="Result">
                        <p>&nbsp;</p>
                    </div>
                </div>
                <div class="input-group">
                    <input type="text"
                           asp-for="Input"
                           class="form-control text-right"
                           placeholder="0.">
                    <div class="input-group-btn">
                        <button type="button" class="btn btn-lg btn-light dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" title="History">
                            <span class="sr-only">History</span>
                        </button>
                        <div class="dropdown-menu dropdown-menu-right" id="history">
                            <span class="dropdown-item text-muted px-4" id="empty">&nbsp;&nbsp;History is empty.</span>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class=" btn-group mb-4 flex-wrap" data-toggle="buttons">
                    <button class="btn btn-secondary solve" title="plot"> Plot </button>
                    <button class="btn btn-secondary solve" title="root"> Root </button>
                    <button class="btn btn-secondary solve" title="find"> Find </button>
                    <button class="btn btn-secondary solve" title="inf"> Minimum </button>
                    <button class="btn btn-secondary solve" title="sup"> Maximum </button>
                    <button class="btn btn-secondary solve" title="area"> Integral </button>
                    <button class="btn btn-secondary solve" title="slope"> Derivative </button>
                </div>
                <div class="equation rounded d-flex justify-content-center align-items-center">
                    <div asp-validation-summary="All" class="text-danger"></div>
                    <div class="Calcpad align-middle align-self-center" id="Result">
                        <p>&nbsp;</p>
                    </div>
                </div>
                <div class="input-group row my-2 h5">
                    <label asp-for="Input" class="col-form-label mx-2" id="fx">f(x) = </label>
                    <input asp-for="Input"
                           class="form-control text-right"
                           placeholder="0">
                </div>
                <div class="input-group row my-2 h6">
                    <label for="a" class="col-form-label mx-2"> for x ∈ [</label>
                    <input type="text" id="a" class="form-control w-4 text-right font-weight-bold" value="-10">
                    <label for="b" class="col-form-label mx-2"> ; </label>
                    <input type="text" id="b" class="form-control w-4 text-right font-weight-bold" value="10">
                    <label for="b" class="col-form-label mx-2">]</label>
                </div>
            }
            <partial name="~/Views/Shared/_KeypadPartial.cshtml" model="@((int)Model.Mode)" />
            <hr />
            <div class="form-row">
                <div class="form-check form-check-inline ml-4 mr-2">
                    <input class="form-check-input" type="radio" asp-for="IsComplex" id="real" value="false" checked>
                    <label class="form-check-label" for="real"> real</label>
                </div>
                <div class="form-check form-check-inline mx-2">
                    <input class="form-check-input" type="radio" asp-for="IsComplex" id="complex" value="true">
                    <label class="form-check-label" for="complex"> complex</label>
                </div>
                <div class="form-check form-check-inline ml-4 mr-2">
                    <input class="form-check-input" type="radio" asp-for="Degrees" id="deg" value="true" checked>
                    <label class="form-check-label" for="deg"> deg</label>
                </div>
                <div class="form-check form-check-inline mx-2">
                    <input class="form-check-input" type="radio" asp-for="Degrees" id="rad" value="false">
                    <label class="form-check-label" for="rad"> rad</label>
                </div>
                @if (Model.Mode != CalculateViewModel.CalculatorMode.Basic)
                {
                    <div class="form-check from-check-inline ml-4 mr-2">
                        <input class="form-check-input" type="checkbox" name="inv" id="inv" value="true">
                        <label class="form-check-label" for="inv"> inv</label>
                    </div>
                    <div class="form-check from-check-inline mx-2">
                        <input class="form-check-input" type="checkbox" name="hyp" id="hyp" value="true">
                        <label class="form-check-label" for="hyp"> hyp</label>
                    </div>
                }
            </div>
        </div>
        <p>To <strong>convert</strong> units, add vertical bar "<span class="ref-link" title="|"> | </span>" followed by the target units: <code>4<i>cm</i>|<i>in</i></code>.</p>
    </div>
    <div class="col-sm-@(12 - w)">
        <partial name="~/Views/Calculator/_UnitsPartial.cshtml" />
    </div>
</div>
@section Scripts{
    <script>
        var type = @((int)Model.Mode);
    </script>
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <environment include="Development">
        <script src="~/js/calcpad/calc.js"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/js/calcpad/calc.min.js"></script>
    </environment>
}
